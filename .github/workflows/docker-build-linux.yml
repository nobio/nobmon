# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Monitoring CI (linux)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [v24]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            nobio/nobmon
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: Setup workder node for nobmon ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      #- run: npm install --only=production

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-linux

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

     # deploy on hetzner server
      - name: Create SSH key
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{secrets.HETZNER_SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.HETZNER_SERVER}}
          SSH_KEY_PATH: .ssh/private.key
        run: |
          mkdir -p .ssh/
          chmod 700 .ssh
          echo "$SSH_PRIVATE_KEY" > .ssh/private.key
          sudo chmod 600 .ssh/private.key
          echo "$SSH_KNOWN_HOSTS" > .ssh/known_hosts

      - name: Deploy to Server
        env:
          SSH_KEY_PATH: .ssh/private.key
          SERVER_USER: ${{secrets.HETZNER_USER}}
          SERVER: ${{secrets.HETZNER_SERVER}}
          REPO_NAME: ${{ github.event.repository.name }}
          APP_DIR: /home/${{secrets.HETZNER_USER}}/container/${{github.event.repository.name}}
        run: |
          ssh -o StrictHostKeyChecking=no -i $SSH_KEY_PATH $SERVER_USER@$SERVER "
          cd $APP_DIR &&
          docker-compose pull && docker-compose up -d --remove-orphans  
          "